{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 In the first question we have first used the fork system call using the if else statements to create 3 child processes S1 for receiving the terminating signal and printing the random number and the other two to call the E1 and E2 programs using the execl system call then in E1 and E2 we have created the body of ST and SR respectively. In the ST program we first print the id of the program then we use setitimer() to set an alarm that will send a signal using SIGALRM to the signal handler of SR this signal will request a timestamp of the cpu using rdTsc which along with the kill system call will be sent to the S1 process using the sigqueue. the SR program will do almost the same thing except using the rdrand to generate a random number and then enqueuing it with the kill system call to send it to S1\'92s handler which will print terminated along with the value.}